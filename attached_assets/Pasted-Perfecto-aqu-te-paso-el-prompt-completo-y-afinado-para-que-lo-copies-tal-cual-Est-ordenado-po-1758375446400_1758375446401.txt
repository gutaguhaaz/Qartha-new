Perfecto üöÄ, aqu√≠ te paso el prompt completo y afinado para que lo copies tal cual. Est√° ordenado por prioridad, con checklists, contratos API y notas clave para evitar fallas:

‚∏ª

üìã Prompt de Implementaci√≥n ‚Äì Qartha (VM / Replit)

Prioridades (en orden)
	1.	Autenticaci√≥n real con tabla users + JWT en cookies HttpOnly.
	2.	Guardias de sesi√≥n en el SPA (login, redirect tras QR, fetch con credentials).
	3.	Roles (admin/visitor) en API y UI (eliminar ADMIN_TOKEN).
	4.	Edici√≥n completa de IDF (persistir diagrams, location, DFO, gallery, docs).
	5.	Alta completa de nuevos IDF (wizard/tabs con todos los campos).

‚∏ª

‚öôÔ∏è 0. Preparativos
	‚Ä¢	Si usas Postgres: renombra app/db/mongo.py ‚Üí postgres.py.
	‚Ä¢	.env backend:

JWT_SECRET=change_me
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60


	‚Ä¢	.env frontend:

VITE_API_BASE_URL=https://<tu-vm>/api



‚∏ª

üîë 1. Autenticaci√≥n JWT + tabla users

Tabla SQL

CREATE TABLE IF NOT EXISTS users(
  id SERIAL PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  role TEXT NOT NULL CHECK (role IN ('admin','visitor')),
  full_name TEXT,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  last_login_at TIMESTAMPTZ
);

Archivos
	‚Ä¢	app/models/user_models.py: UserCreate, UserPublic, UserInDB, TokenPayload.
	‚Ä¢	app/core/security.py: hash_password(), verify_password(), create_access_token().
	‚Ä¢	app/core/config.py: a√±ade JWT_*.
	‚Ä¢	app/routers/auth.py:
	‚Ä¢	POST /api/auth/login ‚Üí set-cookie access_token (HttpOnly).
	‚Ä¢	POST /api/auth/logout ‚Üí borra cookie.
	‚Ä¢	GET  /api/auth/me ‚Üí devuelve UserPublic.
	‚Ä¢	app/main.py: incluye router y crea usuario admin inicial.

Checklist
	‚Ä¢	Tabla users creada.
	‚Ä¢	Login devuelve cookie.
	‚Ä¢	GET /me funciona.
	‚Ä¢	Usuario semilla admin creado.
	‚Ä¢	Eliminado ADMIN_TOKEN duro.

‚∏ª

üîí 2. Guardias de sesi√≥n (SPA + QR)

Cambios
	‚Ä¢	Login.tsx: formulario email/contrase√±a ‚Üí POST /api/auth/login con credentials:"include".
	‚Ä¢	AuthContext: guarda user, loading, login(), logout().
	‚Ä¢	api.ts: centraliza fetch con credentials:"include" y manejo de 401.
	‚Ä¢	ProtectedRoute: si no hay sesi√≥n ‚Üí guarda redirect_to y manda a /login.
	‚Ä¢	Tras login ‚Üí redirige a redirect_to o default cluster/proyecto.

Redirecci√≥n QR
	1.	Al cargar app: guarda redirect_to en sessionStorage y en cookie.
	2.	Tras login: lee redirect_to y redirige all√≠.

Checklist
	‚Ä¢	Acceder a URL de QR sin login manda a /login.
	‚Ä¢	Tras login, redirige a la URL original del QR.
	‚Ä¢	Todas las llamadas fetch llevan credentials:"include".

‚∏ª

üë• 3. Roles admin / visitor

Backend
	‚Ä¢	get_current_admin y get_current_user.
	‚Ä¢	Sustituir verify_admin_token en admin_idfs.py, assets.py, devices.py.
	‚Ä¢	/public_idfs y /qr solo requieren get_current_user.

Frontend
	‚Ä¢	Ocultar CMS, AdminSidebar, botones ‚ÄúAdd IDF‚Äù si role !== "admin".
	‚Ä¢	Mostrar mensaje/403 en pantallas restringidas.

Checklist
	‚Ä¢	Usuario visitor no puede entrar al CMS ni mutar datos.
	‚Ä¢	Usuario admin s√≠ puede.
	‚Ä¢	Todos los endpoints con auth correcta.

‚∏ª

üõ†Ô∏è 4. Edici√≥n completa de IDF

SQL (Postgres)

ALTER TABLE idfs
  ADD COLUMN IF NOT EXISTS diagrams  JSONB NOT NULL DEFAULT '[]',
  ADD COLUMN IF NOT EXISTS location  JSONB NOT NULL DEFAULT '[]',
  ADD COLUMN IF NOT EXISTS dfo       JSONB,
  ADD COLUMN IF NOT EXISTS gallery   JSONB NOT NULL DEFAULT '[]',
  ADD COLUMN IF NOT EXISTS documents JSONB NOT NULL DEFAULT '[]';

Backend
	‚Ä¢	IdfUpsert con todos los campos (description, site, room, dfo, gallery, documents, diagrams, location).
	‚Ä¢	PUT /idfs/{code} acepta y devuelve todos los campos.

Frontend
	‚Ä¢	AdminSidebar: tabs ‚Üí General / DFO / Gallery / Location / Diagrams / Documents.
	‚Ä¢	Uploads devuelven URL p√∫blica inmediata.

Checklist
	‚Ä¢	Campos gallery, docs, diagrams, location, dfo persisten y se leen.
	‚Ä¢	Ediciones reflejadas en UI sin F5.
	‚Ä¢	Borrado individual disponible.

‚∏ª

üÜï 5. Alta completa de IDF

Backend
	‚Ä¢	IdfCreate hereda de IdfUpsert + code.
	‚Ä¢	POST /idfs crea registro completo.

Frontend
	‚Ä¢	Reemplazar AddIdfDialog por wizard/tabs:
	1.	B√°sico (code, title, site, room)
	2.	Fiber/DFO
	3.	Location
	4.	Gallery
	5.	Diagrams
	6.	Documents
	‚Ä¢	Validar code (IDF-xxxx).
	‚Ä¢	Refrescar lista/detalle al crear.

Checklist
	‚Ä¢	Crear IDF con todos los campos.
	‚Ä¢	Nuevo IDF aparece en listado y detalle de inmediato.
	‚Ä¢	URL p√∫blica sigue siendo /cluster/proyecto/idf/{code}.

‚∏ª

üì° Contratos API
	‚Ä¢	Auth
	‚Ä¢	POST /api/auth/login (cookie access_token)
	‚Ä¢	POST /api/auth/logout
	‚Ä¢	GET /api/auth/me
	‚Ä¢	IDFs
	‚Ä¢	GET /api/{cluster}/{project}/idfs
	‚Ä¢	GET /api/{cluster}/{project}/idfs/{code}
	‚Ä¢	POST /api/{cluster}/{project}/idfs (admin)
	‚Ä¢	PUT  /api/{cluster}/{project}/idfs/{code} (admin)
	‚Ä¢	Assets (admin)
	‚Ä¢	POST /api/{cluster}/{project}/assets/{code}/{asset_type}
	‚Ä¢	DELETE /api/{cluster}/{project}/assets/{code}/{asset_type}/{index}

‚∏ª

‚úÖ DoD Global
	‚Ä¢	QR abre ‚Üí pide login si no hay sesi√≥n ‚Üí tras login regresa a la URL original.
	‚Ä¢	Usuarios diferenciados por rol.
	‚Ä¢	IDFs editables con todos los campos.
	‚Ä¢	Alta de IDFs completa y visible de inmediato.
