Prompt for Replit Agent (Enhanced Version)
You are a senior full-stack engineer. Take the existing mono-repo project “Qartha” and perform a comprehensive refactor with THREE main goals:
GOAL 1 — ENGLISH-ONLY PROJECT
Audit ALL code, UI strings, comments, docs, examples, seeds, and filenames for Spanish, and convert EVERYTHING to clear, neutral English.
Update UI copy (buttons, labels, menus, tooltips, toasts, tab names, form placeholders), API docs in the README, sample curl commands, and seed data labels.
Keep API routes and data models unchanged unless the field labels shown to users are in Spanish. If any user-visible labels (e.g., table column “Charola”, “Destino”) exist, convert to English equivalents (“Tray”, “Destination”, etc.). Do NOT break JSON keys that are part of persisted data unless they were Spanish-only labels in the UI; in that case, only change display labels.
Normalize status values used in the health/semaphore logic to English in the UI: “Operational”, “Revision”, “Failure”, “Free”, “Reserved”. If data arrives in Spanish (e.g., “Revisión”, “Falla”, “Libre”, “Reservado”), map it to the English display equivalents without altering the stored raw value.
Ensure README, comments, and in-app help text are fully in English. Include a short glossary if useful.

GOAL 2 — DARK/LIGHT THEME (SYSTEM-AWARE + TOGGLE)
Implement a proper dark/light theme for the frontend using TailwindCSS “dark mode by class”.
Tailwind config: darkMode: "class".
Add a ThemeProvider that:
On first load, reads localStorage.theme if present.
If not present, uses system preference via window.matchMedia("(prefers-color-scheme: dark)").
Applies/removes the dark class on the <html> element accordingly.
Exposes a toggle to switch the theme and persists the choice to localStorage.theme.
Add a visible theme toggle (sun/moon icon) in the Navbar. The state must react immediately and persist across refreshes.
Ensure accessible contrast and legibility in BOTH themes for all UI elements: backgrounds, text, cards, tables, tabs, modals, inputs, toasts, and status pills. Provide distinct hover/focus states.
Verify all key pages are correctly themed: Directory (list/grid), IDF Detail (all tabs), and the new Admin/Config section.
Update all components to support the dark theme (cards, table zebra striping, pills, buttons, inputs, nav, tabs). Keep the existing blue brand accents, providing dark-safe variants automatically via Tailwind.

GOAL 3 — CMS & CONTENT MANAGEMENT REFACTOR
Rename and Repurpose the "CMS" section:
Change the navigation link and route from /cms to /admin. The link text should be "Admin".
This section will now serve as the central hub for managing the entire IDF directory.
Implement full CRUD functionality for IDFs:
The /admin page should display a table of all existing IDFs with controls to Edit and Delete each one.
Include a prominent button to "Add New IDF", which should lead to a creation form.
Implement confirmation modals for all destructive actions (e.g., "Are you sure you want to delete IDF-0001? This action cannot be undone.") to prevent accidental data loss.
Clarify the IDF Editing Workflow:
Create a clear and intuitive form for editing an IDF's details (e.g., code, title, location).
Within the edit form, build a dedicated section for managing associated content:
Image Management: Allow users to upload new images (with previews), reorder existing images, and delete images associated with an IDF.
Document Management: Allow users to upload new documents (PDFs, etc.) and delete existing ones.
Consider using a modern file upload library to improve the user experience with features like drag-and-drop and upload progress indicators.
Add ARIA labels where missing for accessibility, especially for the new controls (e.g., “Toggle theme”, “Edit IDF-0001”, “Delete image 'floorplan.jpg'”).
Run ESLint/Prettier fixes if trivial.

ACCEPTANCE CRITERIA
No Spanish remains anywhere in the repo (code, UI, docs, seeds), except within legacy data values that are mapped to English on display.
On first visit, the theme matches the system preference; a manual toggle persists to localStorage and overrides the system setting thereafter.
All primary views (Directory, IDF Detail, Admin) render correctly in both themes with readable contrast and consistent branding.
The /admin section provides full, intuitive CRUD functionality for IDFs and their associated images/documents.
The README is updated to document:
Theme behavior and how to change it.
Confirmation that the project is now fully in English.
An overview of the new /admin section and its capabilities.
DELIVERABLES
Updated codebase with an English-only UI/text and a working dark/light theme toggle.
A new, fully functional /admin section for complete content management.
README updated with new instructions, theme notes, and examples.
A brief “What changed” section summarizing key English copy updates, theme implementation details, and the new CMS/Admin functionality.
